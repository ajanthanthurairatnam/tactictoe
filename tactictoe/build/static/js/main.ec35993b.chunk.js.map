{"version":3,"sources":["Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["WinningSequence","SequenceNo","Sequence","Tictactoe","props","rows","filter","e","map","s","useState","IsFirstPlayerActive","setFirstPlayerActive","CellActiveUsers","setCellActiveUsers","winner","setWinner","React","className","rowIndex","rindex","columIndex","cindex","onClick","cellIndex","FirstPlayerActive","ActiveCells","index","Cell","length","push","ActiveCellsForActivePlayer","checker","arr","target","every","v","includes","console","log","SetActiveCellValues","App","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ec35993b.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport './main.css'\r\nimport { useState } from 'react';\r\ninterface ITictactoe{\r\n}\r\n\r\ninterface ICellActiveUser{\r\n    Cell:number,\r\n    IsFirstPlayerActive:boolean\r\n}\r\n\r\ninterface IWinningSequence{\r\n    SequenceNo:number,\r\n    Sequence:number[]\r\n}\r\n\r\n\r\n          \r\nconst WinningSequence:IWinningSequence[]=\r\n[\r\n    {\r\n        SequenceNo:1,\r\n        Sequence:[1,2,3]\r\n    },\r\n    {\r\n        SequenceNo:2,\r\n        Sequence:[4,5,6]\r\n    },\r\n    {\r\n        SequenceNo:3,\r\n        Sequence:[7,8,9]\r\n    },\r\n    {\r\n        SequenceNo:4,\r\n        Sequence:[1,4,7]\r\n    },\r\n    {\r\n        SequenceNo:5,\r\n        Sequence:[2,5,8]\r\n    },\r\n    {\r\n        SequenceNo:6,\r\n        Sequence:[3,6,9]\r\n    },\r\n    {\r\n        SequenceNo:7,\r\n        Sequence:[1,5,9]\r\n    },\r\n    {\r\n        SequenceNo:7,\r\n        Sequence:[3,5,7]\r\n    },\r\n]       \r\n\r\nfunction Tictactoe(props:ITictactoe) {\r\n\r\n    const cells:number[]=[1,2,3,4,5,6,7,8,9];\r\n    const rows:number[]=cells.filter(e=>e%3==0).map(s=>s/3);\r\n    const [IsFirstPlayerActive,setFirstPlayerActive]=useState<boolean>(true);\r\n    const [CellActiveUsers,setCellActiveUsers]=useState<ICellActiveUser[]>([]);\r\n    const [winner,setWinner]=useState<string>(\"\");\r\n\r\n    const Reset=()=>\r\n    {\r\n        setFirstPlayerActive(true);\r\n        setCellActiveUsers([]);\r\n        setWinner(\"\");\r\n    }\r\n\r\n    const SetActiveCellValues=(cellIndex:number,rowIndex:number)=>\r\n    {\r\n        const FirstPlayerActive=IsFirstPlayerActive;\r\n        const ActiveCells=CellActiveUsers\r\n        const index=((cellIndex-1)+(rowIndex-1)*3);\r\n        \r\n        if(CellActiveUsers.filter(e=>e.Cell==(index+1)).length<=0)\r\n        {\r\n            ActiveCells.push({Cell:index+1,IsFirstPlayerActive:FirstPlayerActive});\r\n            setCellActiveUsers(ActiveCells);\r\n            \r\n\r\n            const ActiveCellsForActivePlayer=ActiveCells.filter(e=>e.IsFirstPlayerActive==IsFirstPlayerActive).map(e=>e.Cell);\r\n\r\n           let checker = (arr:number[], target:number[]) => target.every(v => arr.includes(v));\r\n\r\n           for(let s of WinningSequence) {\r\n                if(checker(ActiveCellsForActivePlayer, s.Sequence)){\r\n                   setWinner(FirstPlayerActive?\"First Player\":\"Second Player\")\r\n                   break;\r\n                }\r\n          }\r\n\r\n            setFirstPlayerActive(!IsFirstPlayerActive);\r\n            console.log(ActiveCellsForActivePlayer);\r\n        }\r\n    }\r\n\r\n\r\n    React.useEffect(()=>{\r\n\r\n    },[])\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {\r\n                rows.map((rowIndex, rindex) => {\r\n                return (\r\n                 <div className=\"row\">\r\n                     {\r\n                        [1,2,3].map((columIndex, cindex) => {\r\n                            return (\r\n                                <button className={`column column${columIndex}`} \r\n                                        onClick={()=>SetActiveCellValues(columIndex,rowIndex)}>\r\n\r\n                                {\r\n                                ((CellActiveUsers.filter(e=>e.Cell==(((rowIndex-1)*3)+(columIndex-1)+1) && e.IsFirstPlayerActive==true).length>0)?\r\n                                \"x\":\r\n                                ((CellActiveUsers.filter(e=>e.Cell==(((rowIndex-1)*3)+(columIndex-1)+1) && e.IsFirstPlayerActive==false).length>0)?\"o\":\"\")\r\n                                )\r\n                                }\r\n\r\n                                   \r\n                                </button>  \r\n                          \r\n                            )\r\n                            })\r\n                     }\r\n                </div>\r\n                )\r\n                })\r\n            }\r\n         \r\n           \r\n    \r\n         <div className=\"row\">\r\n         <div className={`column-3`} >\r\n           \r\n         \r\n         <span>x-First Player \r\n             o-Second Player </span>\r\n             <button onClick={()=>Reset()}>Reset</button>\r\n        \r\n         </div>\r\n\r\n         \r\n             </div>\r\n\r\n         <div className=\"row\">\r\n         <div className={`column`} >\r\n          \r\n         </div>\r\n         <div className={`column winner`} >\r\n          {winner.length>0?`Winner : ${winner}`:``}\r\n         </div>\r\n         <div className={`column`} >\r\n         </div>\r\n\r\n         \r\n             </div>\r\n\r\n           \r\n        </div>\r\n      \r\n    );\r\n  }\r\n\r\n  export {Tictactoe};\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport {Tictactoe} from './Main'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tictactoe key=\"tictactoe\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}